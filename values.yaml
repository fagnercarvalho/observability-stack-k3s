opentelemetry-collector:
  mode: deployment

  image:
    repository: "otel/opentelemetry-collector-contrib"

  command:
    name: "otelcol-contrib"
    extraArgs: []

  replicaCount: 1

  resources:
    limits:
      memory: 200Mi

  ingress:
    enabled: true
    ingressClassName: "traefik"
    hosts:
      - host: otel.local
        paths:
          - path: /
            pathType: Prefix
            port: 4317 # gRPC receiver
          - path: /
            pathType: Prefix
            port: 4318 # HTTP receiver

  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 10s
              static_configs:
                - targets: ['0.0.0.0:8888']
    processors:
      batch: {}
    connectors:
      servicegraph:
        latency_histogram_buckets: [100ms, 250ms, 1s, 5s, 10s]
        dimensions:
          - dimension-1
          - dimension-2
        store:
          ttl: 1s
          max_items: 10
    exporters:
      debug:
        verbosity: detailed
      otlphttp/tempo:
        endpoint: http://observability-stack-tempo.default.svc.cluster.local:4318
        tls:
          insecure: true
      prometheusremotewrite:
        endpoint: http://observability-stack-prometheus-server.default.svc.cluster.local/api/v1/write
        timeout: 60s
        tls:
          insecure_skip_verify: true
        resource_to_telemetry_conversion:
          enabled: true
      loki:
        endpoint: http://observability-stack-loki.default.svc.cluster.local:3100/loki/api/v1/push
        tls:
          insecure: true
        headers:
          "X-Scope-OrgID": local-loki

    service:
      telemetry:
        logs:
          level: "debug"
        metrics:
          readers:
            - pull:
                exporter:
                  prometheus:
                    host: '0.0.0.0'
                    port: 8888
      pipelines:
        traces:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ otlphttp/tempo, servicegraph, debug ]
        metrics:
          receivers: [ otlp, prometheus ]
          processors: [ batch ]
          exporters: [ prometheusremotewrite, debug ]
        logs:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ loki, debug ]
        metrics/servicegraph:
          receivers: [ servicegraph ]
          exporters: [ prometheusremotewrite, debug ]

grafana:
  enabled: true
  ingress:
    enabled: true
    hosts: ["grafana.local"]
    ingressClassName: "traefik"
    path: /
    pathType: Prefix
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Tempo
          uid: tempo
          editable: true
          type: tempo
          url: http://{{ .Release.Name }}-tempo.default.svc.cluster.local:3100
          isDefault: false
          jsonData:
            tracesToLogsV2:
              datasourceUid: loki
              spanStartTimeShift: '-30m'
              spanEndTimeShift: '30m'
              filterByTraceID: true
            tracesToMetrics:
              datasourceUid: prometheus
            tracesToProfiles:
              datasourceUid: pyroscope
            serviceMap:
              datasourceUid: prometheus
        - name: Prometheus
          uid: prometheus
          editable: true
          type: prometheus
          access: proxy
          url: http://{{ .Release.Name }}-prometheus-server.default.svc.cluster.local
          isDefault: true
          jsonData:
            exemplarTraceIdDestinations:
              - name: trace_id
                datasourceUid: Tempo
                urlDisplayLabel: 'View trace'
        - name: Loki
          uid: loki
          editable: true
          type: loki
          url: http://{{ .Release.Name }}-loki-gateway.default.svc.cluster.local
          isDefault: false
          jsonData:
            derivedFields:
              - datasourceUid: tempo
                matcherRegex: "\"traceid\":\"([a-f0-9]{32})\""
                name: traceid
                url: '$${__value.raw}'
                urlDisplayLabel: 'View Trace'
              - datasourceUid: tempo
                matcherRegex: "\"trace_id\":\"([a-f0-9]{32})\""
                name: trace_id
                url: '$${__value.raw}'
                urlDisplayLabel: 'View Trace'
            httpHeaderName1: "X-Scope-OrgID"
          secureJsonData:
            httpHeaderValue1: "local-loki"
        - name: Pyroscope
          uid: pyroscope
          type: grafana-pyroscope-datasource
          url: http://observability-stack-pyroscope:4040
          jsonData:
            minStep: '15s'

tempo:
  enabled: true
  traces:
    otlp:
      grpc:
        enabled: true
      http:
        enabled: true

prometheus:
  enabled: true
  server:
    extraArgs:
      web.enable-remote-write-receiver: null
      enable-feature: exemplar-storage

loki:
  enabled: true
  loki:
    storage:
      type: filesystem
    storage_config:
      filesystem:
        directory: /tmp/loki/chunks
    commonConfig:
      replication_factor: 1
    schemaConfig:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    tracing:
      enabled: true

  deploymentMode: SingleBinary
  singleBinary:
    replicas: 1
    resources:
      limits:
        cpu: 2
        memory: 2Gi
      requests:
        cpu: 1
        memory: 1Gi
    extraEnv:
      - name: GOMEMLIMIT
        value: 1500MiB

  chunksCache:
    writebackSizeLimit: 10MB

  minio:
    enabled: true

  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0

  ingester:
    replicas: 0
  distributor:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  indexGateway:
    replicas: 0
  compactor:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0
  ruler:
    replicas: 0

pyroscope:
  enabled: true
  ingress:
    enabled: true
    ingressClassName: "traefik"
    hosts:
      - pyroscope.local